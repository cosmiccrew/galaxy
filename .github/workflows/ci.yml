# name: continuous-integration

# on:
#   pull_request:
#   push: # Run CI on the main branch after every merge. This is important to fill the GitHub Actions cache in a way that pull requests can see it
#     branches:
#       - main

# jobs:
#   clippy:
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         include:
#           - os: ubuntu-latest
#             deps: |
#               sudo apt-get update &&
#               sudo apt-get install -y g++ pkg-config libx11-dev libasound2-dev libudev-dev
#           - os: macos-latest
#             deps: |
#               brew install llvm
#           - os: windows-latest
#             deps: |
#               curl -L https://github.com/rust-embedded/cargo-binutils/releases/download/v0.3.6/x86_64-pc-windows-msvc.zip -o temp.zip
#               7z e temp.zip -aos -oC:\Users\runneradmin\.cargo\bin
#               del temp.zip

#     runs-on: ${{ matrix.os }}
#     env:
#       CARGO_TERM_COLOR: always
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install platform specific dependencies
#         run: ${{ matrix.deps }}
#       - uses: Swatinem/rust-cache@v2
#         with:
#           shared-key: clippy
#           prefix-key: v1 #increment this to bust the cache if needed
#           save-if: ${{ github.event_name == 'main' }}
#       - name: Install rust
#         run: |
#           rustup toolchain install stable --profile minimal --no-self-update
#           rustup default stable
#           rustup component add clippy
#       - name: Run cargo clippy
#         run: cargo clippy --profile actions --all-targets -- -D warnings

#   #checks rust fmt - helps ensure all commits are in sync
#   fmt:
#     name: Rustfmt
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install rust
#         run: |
#           rustup toolchain install nightly --profile minimal --no-self-update
#           rustup default nightly
#           rustup component add rustfmt
#       - name: Run rustfmt
#         run: cargo fmt --all -- --check

#   test:
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         include:
#           - os: ubuntu-latest
#             deps: |
#               sudo apt-get update &&
#               sudo apt-get install -y g++ pkg-config libx11-dev libasound2-dev libudev-dev
#             profile: actions
#           - os: macos-latest
#             deps: |
#               brew install llvm
#             profile: actions
#           - os: windows-latest
#             deps: |
#               curl -L https://github.com/rust-embedded/cargo-binutils/releases/download/v0.3.6/x86_64-pc-windows-msvc.zip -o temp.zip
#               7z e temp.zip -aos -oC:\Users\runneradmin\.cargo\bin
#               del temp.zip
#             profile: actions-windows
#     name: test (${{ matrix.os }})
#     runs-on: ${{ matrix.os }}
#     env:
#       CARGO_TERM_COLOR: always
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install platform specific dependencies
#         run: ${{ matrix.deps }}
#       - uses: Swatinem/rust-cache@v2
#         with:
#           shared-key: test
#           prefix-key: v1 #increment this to bust the cache if needed
#           save-if: ${{ github.event_name == 'main' }}
#       - name: Install rust
#         run: |
#           rustup toolchain install stable --profile minimal --no-self-update
#           rustup default stable
#       - name: Run cargo test
#         run: cargo test --profile ${{ matrix.profile }} --all


name: continuous integration

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

jobs:
  fmt:
    runs-on: ubuntu-latest
    name: Check rust formatting
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install rustfmt
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    name: Clippy correctness checks
    strategy:
      fail-fast: false
      matrix:
        config:
          - { target: "x86_64-unknown-linux-gnu" }
          - { target: "wasm32-unknown-unknown" }
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -q \
              libasound2-dev \
              libudev-dev

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ci
          prefix-key: v2 #increment this to bust the cache if needed
          save-if: ${{ github.event_name == 'main' }}

      - name: Install WASM target
        if: matrix.config.target == 'wasm32-unknown-unknown'
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.config.target }}
          components: clippy

      - name: Install clippy
        if: matrix.config.target != 'wasm32-unknown-unknown'
        uses: actions-rs/toolchain@v1
        with:
          components: clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --target ${{ matrix.config.target }} -- -W clippy::correctness -D warnings

  cargo-deny:
    name: License and advisories check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    #prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}