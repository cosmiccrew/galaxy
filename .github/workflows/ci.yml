name: continuous integration

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

jobs:
  fmt:
    runs-on: ubuntu-latest
    name: Check rust formatting
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install rustfmt
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    name: Clippy correctness checks
    strategy:
      fail-fast: false
      matrix:
        config:
          - { target: "x86_64-unknown-linux-gnu" }
          - { target: "wasm32-unknown-unknown" }
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y -q \
              libasound2-dev \
              libudev-dev

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ci
          prefix-key: v2 #increment this to bust the cache if needed
          save-if: ${{ github.event_name == 'push' }}

      - name: Install WASM target
        if: matrix.config.target == 'wasm32-unknown-unknown'
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.config.target }}
          components: clippy

      - name: Install clippy
        if: matrix.config.target != 'wasm32-unknown-unknown'
        uses: actions-rs/toolchain@v1
        with:
          components: clippy

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --target ${{ matrix.config.target }} -- -W clippy::correctness -D warnings

  cargo-deny:
    name: License and advisories check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    #prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - uses: actions/checkout@v3
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check ${{ matrix.checks }}